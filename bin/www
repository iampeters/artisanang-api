#!/usr/bin/env node

/**
 * Module dependencies.
 */
const server = require('../app');
const debug = require('debug')('app:startup');
// const http = require('http');
// const numCPUs = require('os').cpus().length;
// const cluster = require('cluster');

/**
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || '5000';
// server.set('port', port);

/* create cluster */
// if (cluster.isMaster) {
//   debug(`Master ${process.pid} is running on port ${port}`);

//   // Fork workers.
//   for (let i = 0; i < numCPUs; i++) {
//     cluster.fork();
//   }

//   cluster.on('exit', (worker, code, signal) => {
//     debug(`worker ${worker.process.pid} died`);
//     cluster.fork();
//   });
// } else {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind =
      typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug( `Server started on ${bind}` );
  }
// }
